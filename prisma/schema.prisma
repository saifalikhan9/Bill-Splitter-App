datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  OWNER
  FLATMATE
}

// NextAuth required models
model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String?   // Store a hashed password (make it optional for OAuth users)
  role          UserRole  @default(FLATMATE)
  createdAt     DateTime  @default(now())
  image         String?
  emailVerified DateTime?  // Required by NextAuth for OAuth providers

  // NextAuth relationships
  accounts Account[]
  sessions Session[]

  // OAuth2 Email fields
  emailProvider       String?  // e.g., "gmail", "outlook"
  emailAccessToken    String?  @db.Text // Can be long
  emailRefreshToken   String?  @db.Text // Store securely
  emailTokenExpiry    DateTime?
  emailAuthorized     Boolean  @default(false)

  // For owners: a list of bills they create
  bills Bill[]

  // For bill details that reference this user (if they are registered as a consumer)
  BillDetail BillDetail[]

  // Self-relation to associate flatmates with their owner.
  // For a flatmate, this field points to the owner's id.
  ownerId   Int?
  owner     User?  @relation("OwnerFlatmates", fields: [ownerId], references: [id], onDelete: SetNull)
  flatmates User[] @relation("OwnerFlatmates")

  // For owners who generate invitation tokens
  invitationTokens InvitationToken[]

  // For owners who generate flatmate invitations
  flatmateInvitations FlatmateInvitation[]
}

model InvitationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  ownerId   Int
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

// New model for flatmate invitations
model FlatmateInvitation {
  id        Int      @id @default(autoincrement())
  email     String
  name      String
  phone     String?
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  ownerId   Int      @map("owner_id")
  createdAt DateTime @default(now())

  // Relation to the owner who created the invitation
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([ownerId, email])
  @@map("flatmate_invitations")
}

model Bill {
  id            Int          @id @default(autoincrement())
  ownerId       Int          // The user (owner) who created this bill
  masterReading Float
  actualBill    Float
  createdAt     DateTime     @default(now())
  details       BillDetail[]
  owner         User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model BillDetail {
  id        Int      @id @default(autoincrement())
  billId    Int
  name      String
  reading   Float
  Amount    Float
  userId    Int
  createdAt DateTime @default(now())
  bill      Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
